/*
 * EN25QH.c
 *
 *  Created on: Nov 4, 2021
 *      Author: 0
 */

/**
 * @brief    Read Flash Inside ID
 * @param   none
 * @retval   Successfully returns device_id
 */

#include "stm32l4xx_hal.h"
#include "EN25QH.h"
#include "SPI.h"

/***************************************************
Chip Select
*/
void Flash_EN25QH_ChipSelect(uint8_t State)
{
	uint16_t	i = 0;
	/* Set High or low the chip select line on PA.4 pin */
	for(i = 0; i<500; i++); // ??? có nên dùng
	if (State == LOW)
		HAL_GPIO_WritePin(EN25QH_SC_PORT, EN25QH_SC_PIN, GPIO_PIN_RESET);
	else
		HAL_GPIO_WritePin(EN25QH_SC_PORT, EN25QH_SC_PIN, GPIO_PIN_SET);
	// delay
	for(i = 0; i<500; i++);
}

/*******************************************************************************
* Function Name  : SPI_FLASH_SendByte
* Description    : Sends a byte through the SPI interface and return the byte
*                  received from the SPI bus.
* Input          : byte : byte to send.
* Output         : None
* Return         : The value of the received byte.
*******************************************************************************/
uint8_t Flash_EN25QH_Send_Byte(uint8_t byte)
{
	uint8_t retVal=0;
	SPI_TransmitReceive(&byte, &retVal, 1);
	return retVal;
}

/*******************************************************************************
* Function Name  : SPI_FLASH_ReadID
* Description    : Reads FLASH identification.
* Input          : None
* Output         : None
* Return         : FLASH identification
*******************************************************************************/
uint32_t Flash_S25FL_Connect(void)
{
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
	/* Select the FLASH: Chip Select low */
	Flash_EN25QH_ChipSelect(LOW);
	/* Send "RDID " instruction */
	Flash_EN25QH_Send_Byte(EN25QH_JEDEC);
	/* Read a byte from the FLASH */
	Temp0 = Flash_EN25QH_Send_Byte(DUMMY_BYTE);
	/* Read a byte from the FLASH */
	Temp1 = Flash_EN25QH_Send_Byte(DUMMY_BYTE);
	/* Read a byte from the FLASH */
	Temp2 = Flash_EN25QH_Send_Byte(DUMMY_BYTE);
	/* Deselect the FLASH: Chip Select high */
	Flash_EN25QH_ChipSelect(HIGH);
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
	return Temp;
}

/*******************************************************************************
* Function Name  : Flash_S25FL_WaitForWriteEnd
* Description    : Polls the status of the Write In Progress (WIP) flag in the
*                  FLASH's status  register  and  loop  until write  opertaion
*                  has completed.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
uint8_t Flash_S25FL_WaitForWriteEnd(uint32_t timeout)
{
	uint8_t FLASH_Status = 0;
	uint32_t	Start_check = 0;

	Start_check = RT_Count_Systick_u32;

	/* Select the FLASH: Chip Select low */
	Flash_EN25QH_ChipSelect(LOW);

	/* Send "Read Status Register" instruction */
	Flash_EN25QH_Send_Byte(EN25QH_READ_STATUS);

	/* Loop as long as the memory is busy with a write cycle */
  do
  {
    /* Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    FLASH_Status = Flash_S25FL_Send_Byte(DUMMY_BYTE);

	if (Check_Time_Out(Start_check,timeout) == 1)
    {
        Flash_S25FL_ChipSelect(HIGH);
        return 0;
    }
    if((FLASH_Status & WIP_Flag) != 0)
        osDelay(1);
  }while((FLASH_Status & WIP_Flag) != 0); /* Write in progress */

  /* Deselect the FLASH: Chip Select high */
  Flash_S25FL_ChipSelect(HIGH);
  return 1;
}
