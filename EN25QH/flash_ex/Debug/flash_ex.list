
flash_ex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002730  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080028c4  080028c4  000128c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002904  08002904  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002904  08002904  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002904  08002904  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800290c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000014  08002920  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002920  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000954d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001875  00000000  00000000  00029591  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  0002ae08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002b688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020f58  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000764e  00000000  00000000  0004cd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8052  00000000  00000000  000543d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020c4  00000000  00000000  0011c4a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080028ac 	.word	0x080028ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080028ac 	.word	0x080028ac

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fc76 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f862 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8f0 	bl	80003c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001e4:	f000 f8b0 	bl	8000348 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2102      	movs	r1, #2
 80001ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f0:	f000 ff96 	bl	8001120 <HAL_GPIO_WritePin>

  device_id = Flash_EN25QH_Connect();
 80001f4:	f000 fabb 	bl	800076e <Flash_EN25QH_Connect>
 80001f8:	4602      	mov	r2, r0
 80001fa:	4b22      	ldr	r3, [pc, #136]	; (8000284 <main+0xb0>)
 80001fc:	601a      	str	r2, [r3, #0]
  /* Check the SPI Flash ID */
  if (device_id == FLASH_EN25QH_ID)
 80001fe:	4b21      	ldr	r3, [pc, #132]	; (8000284 <main+0xb0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a21      	ldr	r2, [pc, #132]	; (8000288 <main+0xb4>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d13b      	bne.n	8000280 <main+0xac>
  {
    /* OK: Turn on */
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8000208:	2200      	movs	r2, #0
 800020a:	2108      	movs	r1, #8
 800020c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000210:	f000 ff86 	bl	8001120 <HAL_GPIO_WritePin>

    /* Perform a write in the Flash followed by a read of the written data */
    /* Erase SPI FLASH Sector to write on */
	  Flash_EN25QH_EraseSector(FLASH_SECTOR_TO_ERASE);
 8000214:	481d      	ldr	r0, [pc, #116]	; (800028c <main+0xb8>)
 8000216:	f000 fb03 	bl	8000820 <Flash_EN25QH_EraseSector>

    /* Write Tx_Buffer data to SPI FLASH memory */
	  Flash_EN25QH_WriteBuffer(Tx_Buffer, FLASH_WRITE_ADDRESS, BufferSize);
 800021a:	2206      	movs	r2, #6
 800021c:	491b      	ldr	r1, [pc, #108]	; (800028c <main+0xb8>)
 800021e:	481c      	ldr	r0, [pc, #112]	; (8000290 <main+0xbc>)
 8000220:	f000 fb5b 	bl	80008da <Flash_EN25QH_WriteBuffer>

    /* Read data from SPI FLASH memory */
	  Flash_EN25QH_ReadBuffer(Rx_Buffer, FLASH_READ_ADDRESS, BufferSize);
 8000224:	2206      	movs	r2, #6
 8000226:	4919      	ldr	r1, [pc, #100]	; (800028c <main+0xb8>)
 8000228:	481a      	ldr	r0, [pc, #104]	; (8000294 <main+0xc0>)
 800022a:	f000 fbff 	bl	8000a2c <Flash_EN25QH_ReadBuffer>

    /* Check the correctness of written dada */
    TransferStatus1 = Buffercmp(Tx_Buffer, Rx_Buffer, BufferSize);
 800022e:	2206      	movs	r2, #6
 8000230:	4918      	ldr	r1, [pc, #96]	; (8000294 <main+0xc0>)
 8000232:	4817      	ldr	r0, [pc, #92]	; (8000290 <main+0xbc>)
 8000234:	f000 f920 	bl	8000478 <Buffercmp>
 8000238:	4603      	mov	r3, r0
 800023a:	461a      	mov	r2, r3
 800023c:	4b16      	ldr	r3, [pc, #88]	; (8000298 <main+0xc4>)
 800023e:	701a      	strb	r2, [r3, #0]
    /* TransferStatus1 = FAILED, if the transmitted and received data by SPI1
       are different */

    /* Perform an erase in the Flash followed by a read of the written data */
    /* Erase SPI FLASH Sector to write on */
    Flash_EN25QH_EraseSector(FLASH_SECTOR_TO_ERASE);
 8000240:	4812      	ldr	r0, [pc, #72]	; (800028c <main+0xb8>)
 8000242:	f000 faed 	bl	8000820 <Flash_EN25QH_EraseSector>

    /* Read data from SPI FLASH memory */
    Flash_EN25QH_ReadBuffer(Rx_Buffer, FLASH_READ_ADDRESS, BufferSize);
 8000246:	2206      	movs	r2, #6
 8000248:	4910      	ldr	r1, [pc, #64]	; (800028c <main+0xb8>)
 800024a:	4812      	ldr	r0, [pc, #72]	; (8000294 <main+0xc0>)
 800024c:	f000 fbee 	bl	8000a2c <Flash_EN25QH_ReadBuffer>

    /* Check the correctness of erasing operation dada */
    for (Index = 0; Index < BufferSize; Index++)
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <main+0xc8>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	e00f      	b.n	8000278 <main+0xa4>
    {
      if (Rx_Buffer[Index] != 0xFF)
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <main+0xc8>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <main+0xc0>)
 8000260:	5c9b      	ldrb	r3, [r3, r2]
 8000262:	2bff      	cmp	r3, #255	; 0xff
 8000264:	d002      	beq.n	800026c <main+0x98>
      {
        TransferStatus2 = FAILED;
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <main+0xcc>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
    for (Index = 0; Index < BufferSize; Index++)
 800026c:	4b0b      	ldr	r3, [pc, #44]	; (800029c <main+0xc8>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	b2da      	uxtb	r2, r3
 8000274:	4b09      	ldr	r3, [pc, #36]	; (800029c <main+0xc8>)
 8000276:	701a      	strb	r2, [r3, #0]
 8000278:	4b08      	ldr	r3, [pc, #32]	; (800029c <main+0xc8>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2b05      	cmp	r3, #5
 800027e:	d9eb      	bls.n	8000258 <main+0x84>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000280:	e7fe      	b.n	8000280 <main+0xac>
 8000282:	bf00      	nop
 8000284:	20000034 	.word	0x20000034
 8000288:	001c7018 	.word	0x001c7018
 800028c:	00800001 	.word	0x00800001
 8000290:	20000000 	.word	0x20000000
 8000294:	20000038 	.word	0x20000038
 8000298:	20000031 	.word	0x20000031
 800029c:	20000030 	.word	0x20000030
 80002a0:	20000007 	.word	0x20000007

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b096      	sub	sp, #88	; 0x58
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2244      	movs	r2, #68	; 0x44
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 faf2 	bl	800289c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c6:	2310      	movs	r3, #16
 80002c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002d2:	2360      	movs	r3, #96	; 0x60
 80002d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002da:	2301      	movs	r3, #1
 80002dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002de:	2301      	movs	r3, #1
 80002e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80002e2:	2328      	movs	r3, #40	; 0x28
 80002e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002e6:	2307      	movs	r3, #7
 80002e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0314 	add.w	r3, r7, #20
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 ff8e 	bl	8001218 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000302:	f000 f8db 	bl	80004bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030a:	2303      	movs	r3, #3
 800030c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800031a:	463b      	mov	r3, r7
 800031c:	2104      	movs	r1, #4
 800031e:	4618      	mov	r0, r3
 8000320:	f001 fb9a 	bl	8001a58 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800032a:	f000 f8c7 	bl	80004bc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800032e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000332:	f000 ff1b 	bl	800116c <HAL_PWREx_ControlVoltageScaling>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800033c:	f000 f8be 	bl	80004bc <Error_Handler>
  }
}
 8000340:	bf00      	nop
 8000342:	3758      	adds	r7, #88	; 0x58
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_SPI1_Init+0x74>)
 800034e:	4a1c      	ldr	r2, [pc, #112]	; (80003c0 <MX_SPI1_Init+0x78>)
 8000350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <MX_SPI1_Init+0x74>)
 8000354:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_SPI1_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_SPI1_Init+0x74>)
 8000362:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000366:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_SPI1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800036e:	4b13      	ldr	r3, [pc, #76]	; (80003bc <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000374:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_SPI1_Init+0x74>)
 8000376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800037a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800037c:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_SPI1_Init+0x74>)
 800037e:	2208      	movs	r2, #8
 8000380:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000388:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_SPI1_Init+0x74>)
 800038a:	2200      	movs	r2, #0
 800038c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_SPI1_Init+0x74>)
 8000390:	2200      	movs	r2, #0
 8000392:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_SPI1_Init+0x74>)
 8000396:	2207      	movs	r2, #7
 8000398:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_SPI1_Init+0x74>)
 800039c:	2200      	movs	r2, #0
 800039e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_SPI1_Init+0x74>)
 80003a2:	2208      	movs	r2, #8
 80003a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003a6:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_SPI1_Init+0x74>)
 80003a8:	f001 fd22 	bl	8001df0 <HAL_SPI_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f000 f883 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000040 	.word	0x20000040
 80003c0:	40013000 	.word	0x40013000

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]
 80003d6:	60da      	str	r2, [r3, #12]
 80003d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003da:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_GPIO_Init+0xac>)
 80003dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003de:	4a24      	ldr	r2, [pc, #144]	; (8000470 <MX_GPIO_Init+0xac>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_GPIO_Init+0xac>)
 80003e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	60bb      	str	r3, [r7, #8]
 80003f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_GPIO_Init+0xac>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <MX_GPIO_Init+0xac>)
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fe:	4b1c      	ldr	r3, [pc, #112]	; (8000470 <MX_GPIO_Init+0xac>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	f003 0304 	and.w	r3, r3, #4
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2102      	movs	r1, #2
 800040e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000412:	f000 fe85 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2108      	movs	r1, #8
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f000 fe7f 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 8000422:	2201      	movs	r2, #1
 8000424:	2110      	movs	r1, #16
 8000426:	4813      	ldr	r0, [pc, #76]	; (8000474 <MX_GPIO_Init+0xb0>)
 8000428:	f000 fe7a 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800042c:	230a      	movs	r3, #10
 800042e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	2301      	movs	r3, #1
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	2300      	movs	r3, #0
 800043a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	4619      	mov	r1, r3
 8000442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000446:	f000 fcf1 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800044a:	2310      	movs	r3, #16
 800044c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2300      	movs	r3, #0
 8000458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	4619      	mov	r1, r3
 8000460:	4804      	ldr	r0, [pc, #16]	; (8000474 <MX_GPIO_Init+0xb0>)
 8000462:	f000 fce3 	bl	8000e2c <HAL_GPIO_Init>

}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40021000 	.word	0x40021000
 8000474:	48000800 	.word	0x48000800

08000478 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval PASSED: pBuffer1 identical to pBuffer2
  *         FAILED: pBuffer1 differs from pBuffer2
  */
TestStatus Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	4613      	mov	r3, r2
 8000484:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 8000486:	e00d      	b.n	80004a4 <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	781a      	ldrb	r2, [r3, #0]
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	d001      	beq.n	8000498 <Buffercmp+0x20>
    {
      return FAILED;
 8000494:	2300      	movs	r3, #0
 8000496:	e00b      	b.n	80004b0 <Buffercmp+0x38>
    }

    pBuffer1++;
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	3301      	adds	r3, #1
 800049c:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 800049e:	68bb      	ldr	r3, [r7, #8]
 80004a0:	3301      	adds	r3, #1
 80004a2:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 80004a4:	88fb      	ldrh	r3, [r7, #6]
 80004a6:	1e5a      	subs	r2, r3, #1
 80004a8:	80fa      	strh	r2, [r7, #6]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d1ec      	bne.n	8000488 <Buffercmp+0x10>
  }

  return PASSED;
 80004ae:	2301      	movs	r3, #1
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3714      	adds	r7, #20
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <HAL_MspInit+0x44>)
 80004d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <HAL_MspInit+0x44>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6613      	str	r3, [r2, #96]	; 0x60
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <HAL_MspInit+0x44>)
 80004e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004e2:	f003 0301 	and.w	r3, r3, #1
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <HAL_MspInit+0x44>)
 80004ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ee:	4a08      	ldr	r2, [pc, #32]	; (8000510 <HAL_MspInit+0x44>)
 80004f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004f4:	6593      	str	r3, [r2, #88]	; 0x58
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <HAL_MspInit+0x44>)
 80004f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a1b      	ldr	r2, [pc, #108]	; (80005a0 <HAL_SPI_MspInit+0x8c>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d130      	bne.n	8000598 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000536:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <HAL_SPI_MspInit+0x90>)
 8000538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053a:	4a1a      	ldr	r2, [pc, #104]	; (80005a4 <HAL_SPI_MspInit+0x90>)
 800053c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000540:	6613      	str	r3, [r2, #96]	; 0x60
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <HAL_SPI_MspInit+0x90>)
 8000544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <HAL_SPI_MspInit+0x90>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <HAL_SPI_MspInit+0x90>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <HAL_SPI_MspInit+0x90>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000566:	23e0      	movs	r3, #224	; 0xe0
 8000568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000572:	2303      	movs	r3, #3
 8000574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000576:	2305      	movs	r3, #5
 8000578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f000 fc52 	bl	8000e2c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2100      	movs	r1, #0
 800058c:	2023      	movs	r0, #35	; 0x23
 800058e:	f000 fbd6 	bl	8000d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000592:	2023      	movs	r0, #35	; 0x23
 8000594:	f000 fbef 	bl	8000d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000598:	bf00      	nop
 800059a:	3728      	adds	r7, #40	; 0x28
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40013000 	.word	0x40013000
 80005a4:	40021000 	.word	0x40021000

080005a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ea:	b480      	push	{r7}
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	RT_Count_Systick_u32 ++;
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <SysTick_Handler+0x18>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	4a03      	ldr	r2, [pc, #12]	; (8000610 <SysTick_Handler+0x18>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	200000a4 	.word	0x200000a4

08000614 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <SPI1_IRQHandler+0x10>)
 800061a:	f001 fe9f 	bl	800235c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000040 	.word	0x20000040

08000628 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <SystemInit+0x64>)
 800062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000632:	4a16      	ldr	r2, [pc, #88]	; (800068c <SystemInit+0x64>)
 8000634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <SystemInit+0x68>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a13      	ldr	r2, [pc, #76]	; (8000690 <SystemInit+0x68>)
 8000642:	f043 0301 	orr.w	r3, r3, #1
 8000646:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <SystemInit+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <SystemInit+0x68>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <SystemInit+0x68>)
 8000654:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000658:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800065c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <SystemInit+0x68>)
 8000660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000664:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <SystemInit+0x68>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <SystemInit+0x68>)
 800066c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000670:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <SystemInit+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <SystemInit+0x64>)
 800067a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800067e:	609a      	str	r2, [r3, #8]
#endif
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000ed00 	.word	0xe000ed00
 8000690:	40021000 	.word	0x40021000

08000694 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000698:	f7ff ffc6 	bl	8000628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800069c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800069e:	e003      	b.n	80006a8 <LoopCopyDataInit>

080006a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006a6:	3104      	adds	r1, #4

080006a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006b0:	d3f6      	bcc.n	80006a0 <CopyDataInit>
	ldr	r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80006b4:	e002      	b.n	80006bc <LoopFillZerobss>

080006b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006b8:	f842 3b04 	str.w	r3, [r2], #4

080006bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <LoopForever+0x16>)
	cmp	r2, r3
 80006be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006c0:	d3f9      	bcc.n	80006b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c2:	f002 f8c7 	bl	8002854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006c6:	f7ff fd85 	bl	80001d4 <main>

080006ca <LoopForever>:

LoopForever:
    b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006cc:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 80006d0:	0800290c 	.word	0x0800290c
	ldr	r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006d8:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 80006dc:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 80006e0:	200000ac 	.word	0x200000ac

080006e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_IRQHandler>
	...

080006e8 <Flash_EN25QH_ChipSelect>:
extern 	uint32_t RT_Count_Systick_u32;
/***************************************************
Chip Select
*/
void Flash_EN25QH_ChipSelect(uint8_t State)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
	uint16_t	i = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	81fb      	strh	r3, [r7, #14]
	/* Set High or low the chip select line on PA.4 pin */
	for(i = 0; i<500; i++); // ??? có nên dùng
 80006f6:	2300      	movs	r3, #0
 80006f8:	81fb      	strh	r3, [r7, #14]
 80006fa:	e002      	b.n	8000702 <Flash_EN25QH_ChipSelect+0x1a>
 80006fc:	89fb      	ldrh	r3, [r7, #14]
 80006fe:	3301      	adds	r3, #1
 8000700:	81fb      	strh	r3, [r7, #14]
 8000702:	89fb      	ldrh	r3, [r7, #14]
 8000704:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000708:	d3f8      	bcc.n	80006fc <Flash_EN25QH_ChipSelect+0x14>
	if (State == LOW)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d105      	bne.n	800071c <Flash_EN25QH_ChipSelect+0x34>
		HAL_GPIO_WritePin(EN25QH_SC_PORT, EN25QH_SC_PIN, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	480b      	ldr	r0, [pc, #44]	; (8000744 <Flash_EN25QH_ChipSelect+0x5c>)
 8000716:	f000 fd03 	bl	8001120 <HAL_GPIO_WritePin>
 800071a:	e004      	b.n	8000726 <Flash_EN25QH_ChipSelect+0x3e>
	else
		HAL_GPIO_WritePin(EN25QH_SC_PORT, EN25QH_SC_PIN, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2110      	movs	r1, #16
 8000720:	4808      	ldr	r0, [pc, #32]	; (8000744 <Flash_EN25QH_ChipSelect+0x5c>)
 8000722:	f000 fcfd 	bl	8001120 <HAL_GPIO_WritePin>
	// delay
	for(i = 0; i<500; i++);
 8000726:	2300      	movs	r3, #0
 8000728:	81fb      	strh	r3, [r7, #14]
 800072a:	e002      	b.n	8000732 <Flash_EN25QH_ChipSelect+0x4a>
 800072c:	89fb      	ldrh	r3, [r7, #14]
 800072e:	3301      	adds	r3, #1
 8000730:	81fb      	strh	r3, [r7, #14]
 8000732:	89fb      	ldrh	r3, [r7, #14]
 8000734:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000738:	d3f8      	bcc.n	800072c <Flash_EN25QH_ChipSelect+0x44>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	48000800 	.word	0x48000800

08000748 <Flash_EN25QH_Send_Byte>:
* Input          : byte : byte to send.
* Output         : None
* Return         : The value of the received byte.
*******************************************************************************/
uint8_t Flash_EN25QH_Send_Byte(uint8_t byte)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	uint8_t retVal=0;
 8000752:	2300      	movs	r3, #0
 8000754:	73fb      	strb	r3, [r7, #15]
	SPI_TransmitReceive(&byte, &retVal, 1);
 8000756:	f107 010f 	add.w	r1, r7, #15
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	2201      	movs	r2, #1
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f99a 	bl	8000a98 <SPI_TransmitReceive>
	return retVal;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <Flash_EN25QH_Connect>:
* Input          : None
* Output         : None
* Return         : FLASH identification
*******************************************************************************/
uint32_t Flash_EN25QH_Connect(void)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	2300      	movs	r3, #0
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
	/* Select the FLASH: Chip Select low */
	Flash_EN25QH_ChipSelect(LOW);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ffaf 	bl	80006e8 <Flash_EN25QH_ChipSelect>
	/* Send "RDID " instruction */
	Flash_EN25QH_Send_Byte(EN25QH_JEDEC);
 800078a:	209f      	movs	r0, #159	; 0x9f
 800078c:	f7ff ffdc 	bl	8000748 <Flash_EN25QH_Send_Byte>
	/* Read a byte from the FLASH */
	Temp0 = Flash_EN25QH_Send_Byte(DUMMY_BYTE);
 8000790:	20a5      	movs	r0, #165	; 0xa5
 8000792:	f7ff ffd9 	bl	8000748 <Flash_EN25QH_Send_Byte>
 8000796:	4603      	mov	r3, r0
 8000798:	60bb      	str	r3, [r7, #8]
	/* Read a byte from the FLASH */
	Temp1 = Flash_EN25QH_Send_Byte(DUMMY_BYTE);
 800079a:	20a5      	movs	r0, #165	; 0xa5
 800079c:	f7ff ffd4 	bl	8000748 <Flash_EN25QH_Send_Byte>
 80007a0:	4603      	mov	r3, r0
 80007a2:	607b      	str	r3, [r7, #4]
	/* Read a byte from the FLASH */
	Temp2 = Flash_EN25QH_Send_Byte(DUMMY_BYTE);
 80007a4:	20a5      	movs	r0, #165	; 0xa5
 80007a6:	f7ff ffcf 	bl	8000748 <Flash_EN25QH_Send_Byte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	603b      	str	r3, [r7, #0]
	/* Deselect the FLASH: Chip Select high */
	Flash_EN25QH_ChipSelect(HIGH);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff ff9a 	bl	80006e8 <Flash_EN25QH_ChipSelect>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	041a      	lsls	r2, r3, #16
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	4313      	orrs	r3, r2
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
	return Temp;
 80007c4:	68fb      	ldr	r3, [r7, #12]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <Flash_EN25QH_Enable>:
* Output         : None
* Return         : None
*******************************************************************************/
/* Chua co check trang thai khi ghi thanh cong */
void Flash_EN25QH_Enable(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* Select the FLASH: Chip Select low */
	Flash_EN25QH_ChipSelect(LOW);
 80007d2:	2000      	movs	r0, #0
 80007d4:	f7ff ff88 	bl	80006e8 <Flash_EN25QH_ChipSelect>

  /* Send "Write Enable" instruction */
	Flash_EN25QH_Send_Byte(EN25QH_WREN);
 80007d8:	2006      	movs	r0, #6
 80007da:	f7ff ffb5 	bl	8000748 <Flash_EN25QH_Send_Byte>

  /* Deselect the FLASH: Chip Select high */
	Flash_EN25QH_ChipSelect(HIGH);
 80007de:	2001      	movs	r0, #1
 80007e0:	f7ff ff82 	bl	80006e8 <Flash_EN25QH_ChipSelect>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <Flash_EN25QH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void Flash_EN25QH_WaitForWriteEnd(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  Flash_EN25QH_ChipSelect(LOW);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff ff78 	bl	80006e8 <Flash_EN25QH_ChipSelect>

  /*!< Send "Read Status Register" instruction */
  Flash_EN25QH_Send_Byte(EN25QH_READ_STATUS);
 80007f8:	2005      	movs	r0, #5
 80007fa:	f7ff ffa5 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    flashstatus = Flash_EN25QH_Send_Byte(DUMMY_BYTE);
 80007fe:	20a5      	movs	r0, #165	; 0xa5
 8000800:	f7ff ffa2 	bl	8000748 <Flash_EN25QH_Send_Byte>
 8000804:	4603      	mov	r3, r0
 8000806:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & WIP_FLAG) == SET); /* Write in progress */
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1f5      	bne.n	80007fe <Flash_EN25QH_WaitForWriteEnd+0x16>

  /*!< Deselect the FLASH: Chip Select high */
  Flash_EN25QH_ChipSelect(HIGH);
 8000812:	2001      	movs	r0, #1
 8000814:	f7ff ff68 	bl	80006e8 <Flash_EN25QH_ChipSelect>
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <Flash_EN25QH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void Flash_EN25QH_EraseSector(uint32_t SectorAddr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
	Flash_EN25QH_Enable();
 8000828:	f7ff ffd1 	bl	80007ce <Flash_EN25QH_Enable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
	Flash_EN25QH_ChipSelect(LOW);
 800082c:	2000      	movs	r0, #0
 800082e:	f7ff ff5b 	bl	80006e8 <Flash_EN25QH_ChipSelect>
  /*!< Send Sector Erase instruction */
	Flash_EN25QH_Send_Byte(EN25QH_SECTOR_ERASE);
 8000832:	2020      	movs	r0, #32
 8000834:	f7ff ff88 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Send SectorAddr high nibble address byte */
	Flash_EN25QH_Send_Byte((SectorAddr & 0xFF0000) >> 16);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	0c1b      	lsrs	r3, r3, #16
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff82 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Send SectorAddr medium nibble address byte */
	Flash_EN25QH_Send_Byte((SectorAddr & 0xFF00) >> 8);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	0a1b      	lsrs	r3, r3, #8
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff7c 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Send SectorAddr low nibble address byte */
	Flash_EN25QH_Send_Byte(SectorAddr & 0xFF);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff77 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Deselect the FLASH: Chip Select high */
	Flash_EN25QH_ChipSelect(HIGH);
 800085a:	2001      	movs	r0, #1
 800085c:	f7ff ff44 	bl	80006e8 <Flash_EN25QH_ChipSelect>

  /*!< Wait the end of Flash writing */
	Flash_EN25QH_WaitForWriteEnd();
 8000860:	f7ff ffc2 	bl	80007e8 <Flash_EN25QH_WaitForWriteEnd>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <Flash_EN25QH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "Flash_EN25QH_PAGESIZE" value.
  * @retval None
  */
void Flash_EN25QH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	4613      	mov	r3, r2
 8000878:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
	Flash_EN25QH_Enable();
 800087a:	f7ff ffa8 	bl	80007ce <Flash_EN25QH_Enable>

  /*!< Select the FLASH: Chip Select low */
	Flash_EN25QH_ChipSelect(LOW);
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff ff32 	bl	80006e8 <Flash_EN25QH_ChipSelect>
  /*!< Send "Write to Memory " instruction */
	Flash_EN25QH_Send_Byte(EN25QH_WRITE);
 8000884:	2002      	movs	r0, #2
 8000886:	f7ff ff5f 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Send WriteAddr high nibble address byte to write to */
	Flash_EN25QH_Send_Byte((WriteAddr & 0xFF0000) >> 16);
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	0c1b      	lsrs	r3, r3, #16
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff59 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Send WriteAddr medium nibble address byte to write to */
	Flash_EN25QH_Send_Byte((WriteAddr & 0xFF00) >> 8);
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	0a1b      	lsrs	r3, r3, #8
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff53 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Send WriteAddr low nibble address byte to write to */
	Flash_EN25QH_Send_Byte(WriteAddr & 0xFF);
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff4e 	bl	8000748 <Flash_EN25QH_Send_Byte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 80008ac:	e007      	b.n	80008be <Flash_EN25QH_WritePage+0x52>
  {
    /*!< Send the current byte */
	  Flash_EN25QH_Send_Byte(*pBuffer);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ff48 	bl	8000748 <Flash_EN25QH_Send_Byte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3301      	adds	r3, #1
 80008bc:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 80008be:	88fb      	ldrh	r3, [r7, #6]
 80008c0:	1e5a      	subs	r2, r3, #1
 80008c2:	80fa      	strh	r2, [r7, #6]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f2      	bne.n	80008ae <Flash_EN25QH_WritePage+0x42>
  }

  /*!< Deselect the FLASH: Chip Select high */
  Flash_EN25QH_ChipSelect(HIGH);
 80008c8:	2001      	movs	r0, #1
 80008ca:	f7ff ff0d 	bl	80006e8 <Flash_EN25QH_ChipSelect>

  /*!< Wait the end of Flash writing */
  Flash_EN25QH_WaitForWriteEnd();
 80008ce:	f7ff ff8b 	bl	80007e8 <Flash_EN25QH_WaitForWriteEnd>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <Flash_EN25QH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void Flash_EN25QH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	60f8      	str	r0, [r7, #12]
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	4613      	mov	r3, r2
 80008e6:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	75fb      	strb	r3, [r7, #23]
 80008ec:	2300      	movs	r3, #0
 80008ee:	75bb      	strb	r3, [r7, #22]
 80008f0:	2300      	movs	r3, #0
 80008f2:	757b      	strb	r3, [r7, #21]
 80008f4:	2300      	movs	r3, #0
 80008f6:	753b      	strb	r3, [r7, #20]
 80008f8:	2300      	movs	r3, #0
 80008fa:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % Flash_EN25QH_PAGESIZE; /* Kiem tra truong hop dia chi bat dau ko phai la boi so cua PAGE_SIZE */
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	757b      	strb	r3, [r7, #21]
  count = Flash_EN25QH_PAGESIZE - Addr;		/* tinh khoang trong con lai cua 1 page de ghi du lieu */
 8000900:	7d7b      	ldrb	r3, [r7, #21]
 8000902:	425b      	negs	r3, r3
 8000904:	753b      	strb	r3, [r7, #20]
  NumOfPage = NumByteToWrite / Flash_EN25QH_PAGESIZE;
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b29b      	uxth	r3, r3
 800090c:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % Flash_EN25QH_PAGESIZE;
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is Flash_EN25QH_PAGESIZE aligned - Dia chi la boi so cua PAGE_SIZE */
 8000912:	7d7b      	ldrb	r3, [r7, #21]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d124      	bne.n	8000962 <Flash_EN25QH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < Flash_EN25QH_PAGESIZE */
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d114      	bne.n	8000948 <Flash_EN25QH_WriteBuffer+0x6e>
    {
    	Flash_EN25QH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	461a      	mov	r2, r3
 8000922:	68b9      	ldr	r1, [r7, #8]
 8000924:	68f8      	ldr	r0, [r7, #12]
 8000926:	f7ff ffa1 	bl	800086c <Flash_EN25QH_WritePage>
      {
    	Flash_EN25QH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 800092a:	e07b      	b.n	8000a24 <Flash_EN25QH_WriteBuffer+0x14a>
    	Flash_EN25QH_WritePage(pBuffer, WriteAddr, Flash_EN25QH_PAGESIZE);
 800092c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f7ff ff9a 	bl	800086c <Flash_EN25QH_WritePage>
        WriteAddr += Flash_EN25QH_PAGESIZE;
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800093e:	60bb      	str	r3, [r7, #8]
        pBuffer += Flash_EN25QH_PAGESIZE;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000946:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	1e5a      	subs	r2, r3, #1
 800094c:	75fa      	strb	r2, [r7, #23]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1ec      	bne.n	800092c <Flash_EN25QH_WriteBuffer+0x52>
      Flash_EN25QH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8000952:	7dbb      	ldrb	r3, [r7, #22]
 8000954:	b29b      	uxth	r3, r3
 8000956:	461a      	mov	r2, r3
 8000958:	68b9      	ldr	r1, [r7, #8]
 800095a:	68f8      	ldr	r0, [r7, #12]
 800095c:	f7ff ff86 	bl	800086c <Flash_EN25QH_WritePage>
}
 8000960:	e060      	b.n	8000a24 <Flash_EN25QH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < Flash_EN25QH_PAGESIZE */
 8000962:	7dfb      	ldrb	r3, [r7, #23]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d125      	bne.n	80009b4 <Flash_EN25QH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > Flash_EN25QH_PAGESIZE - so khoang trong ko du, phai can page moi */
 8000968:	7dba      	ldrb	r2, [r7, #22]
 800096a:	7d3b      	ldrb	r3, [r7, #20]
 800096c:	429a      	cmp	r2, r3
 800096e:	d91a      	bls.n	80009a6 <Flash_EN25QH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;		// tinh khoang data can luu o page moi
 8000970:	7dba      	ldrb	r2, [r7, #22]
 8000972:	7d3b      	ldrb	r3, [r7, #20]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	74fb      	strb	r3, [r7, #19]
        Flash_EN25QH_WritePage(pBuffer, WriteAddr, count);
 8000978:	7d3b      	ldrb	r3, [r7, #20]
 800097a:	b29b      	uxth	r3, r3
 800097c:	461a      	mov	r2, r3
 800097e:	68b9      	ldr	r1, [r7, #8]
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f7ff ff73 	bl	800086c <Flash_EN25QH_WritePage>
        WriteAddr += count;
 8000986:	7d3b      	ldrb	r3, [r7, #20]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	4413      	add	r3, r2
 800098c:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 800098e:	7d3b      	ldrb	r3, [r7, #20]
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
        Flash_EN25QH_WritePage(pBuffer, WriteAddr, temp);
 8000996:	7cfb      	ldrb	r3, [r7, #19]
 8000998:	b29b      	uxth	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	f7ff ff64 	bl	800086c <Flash_EN25QH_WritePage>
}
 80009a4:	e03e      	b.n	8000a24 <Flash_EN25QH_WriteBuffer+0x14a>
    	Flash_EN25QH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	461a      	mov	r2, r3
 80009aa:	68b9      	ldr	r1, [r7, #8]
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff ff5d 	bl	800086c <Flash_EN25QH_WritePage>
}
 80009b2:	e037      	b.n	8000a24 <Flash_EN25QH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 80009b4:	7d3b      	ldrb	r3, [r7, #20]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	88fa      	ldrh	r2, [r7, #6]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / Flash_EN25QH_PAGESIZE;
 80009be:	88fb      	ldrh	r3, [r7, #6]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % Flash_EN25QH_PAGESIZE;
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	75bb      	strb	r3, [r7, #22]
      Flash_EN25QH_WritePage(pBuffer, WriteAddr, count);
 80009ca:	7d3b      	ldrb	r3, [r7, #20]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	461a      	mov	r2, r3
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f7ff ff4a 	bl	800086c <Flash_EN25QH_WritePage>
      WriteAddr += count;
 80009d8:	7d3b      	ldrb	r3, [r7, #20]
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	4413      	add	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 80009e0:	7d3b      	ldrb	r3, [r7, #20]
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	4413      	add	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80009e8:	e00d      	b.n	8000a06 <Flash_EN25QH_WriteBuffer+0x12c>
    	Flash_EN25QH_WritePage(pBuffer, WriteAddr, Flash_EN25QH_PAGESIZE);
 80009ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ee:	68b9      	ldr	r1, [r7, #8]
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f7ff ff3b 	bl	800086c <Flash_EN25QH_WritePage>
        WriteAddr += Flash_EN25QH_PAGESIZE;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80009fc:	60bb      	str	r3, [r7, #8]
        pBuffer += Flash_EN25QH_PAGESIZE;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a04:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8000a06:	7dfb      	ldrb	r3, [r7, #23]
 8000a08:	1e5a      	subs	r2, r3, #1
 8000a0a:	75fa      	strb	r2, [r7, #23]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1ec      	bne.n	80009ea <Flash_EN25QH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8000a10:	7dbb      	ldrb	r3, [r7, #22]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d006      	beq.n	8000a24 <Flash_EN25QH_WriteBuffer+0x14a>
    	Flash_EN25QH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8000a16:	7dbb      	ldrb	r3, [r7, #22]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff ff24 	bl	800086c <Flash_EN25QH_WritePage>
}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <Flash_EN25QH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void Flash_EN25QH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	4613      	mov	r3, r2
 8000a38:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
	Flash_EN25QH_ChipSelect(LOW);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff fe54 	bl	80006e8 <Flash_EN25QH_ChipSelect>

  /*!< Send "Read from Memory " instruction */
	Flash_EN25QH_Send_Byte(EN25QH_READ);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f7ff fe81 	bl	8000748 <Flash_EN25QH_Send_Byte>

  /*!< Send ReadAddr high nibble address byte to read from */
	Flash_EN25QH_Send_Byte((ReadAddr & 0xFF0000) >> 16);
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	0c1b      	lsrs	r3, r3, #16
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fe7b 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Send ReadAddr medium nibble address byte to read from */
	Flash_EN25QH_Send_Byte((ReadAddr& 0xFF00) >> 8);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe75 	bl	8000748 <Flash_EN25QH_Send_Byte>
  /*!< Send ReadAddr low nibble address byte to read from */
	Flash_EN25QH_Send_Byte(ReadAddr & 0xFF);
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe70 	bl	8000748 <Flash_EN25QH_Send_Byte>

  while (NumByteToRead--) /*!< while there is data to be read */
 8000a68:	e009      	b.n	8000a7e <Flash_EN25QH_ReadBuffer+0x52>
  {
    /*!< Read a byte from the FLASH */
    *pBuffer = Flash_EN25QH_Send_Byte(DUMMY_BYTE);
 8000a6a:	20a5      	movs	r0, #165	; 0xa5
 8000a6c:	f7ff fe6c 	bl	8000748 <Flash_EN25QH_Send_Byte>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	1e5a      	subs	r2, r3, #1
 8000a82:	80fa      	strh	r2, [r7, #6]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1f0      	bne.n	8000a6a <Flash_EN25QH_ReadBuffer+0x3e>
  }

  /*!< Deselect the FLASH: Chip Select high */
  Flash_EN25QH_ChipSelect(HIGH);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f7ff fe2d 	bl	80006e8 <Flash_EN25QH_ChipSelect>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <SPI_TransmitReceive>:
 * @param   recv_buf  ——  Receive data buffer first address
 * @param   size ——  To send / The number of bytes of data received
 * @retval   Successfully returns HAL_OK
 */
HAL_StatusTypeDef SPI_TransmitReceive(uint8_t* send_buf, uint8_t* recv_buf, uint16_t size)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	80fb      	strh	r3, [r7, #6]
   return HAL_SPI_TransmitReceive(&hspi1, send_buf, recv_buf, size, 1000);
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	68f9      	ldr	r1, [r7, #12]
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <SPI_TransmitReceive+0x2c>)
 8000ab6:	f001 fa3e 	bl	8001f36 <HAL_SPI_TransmitReceive>
 8000aba:	4603      	mov	r3, r0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000040 	.word	0x20000040

08000ac8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f000 f928 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 f80d 	bl	8000af8 <HAL_InitTick>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d002      	beq.n	8000aea <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	e001      	b.n	8000aee <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aea:	f7ff fcef 	bl	80004cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aee:	79fb      	ldrb	r3, [r7, #7]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_InitTick+0x6c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d023      	beq.n	8000b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_InitTick+0x70>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_InitTick+0x6c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f935 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10f      	bne.n	8000b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d809      	bhi.n	8000b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f8ff 	bl	8000d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_InitTick+0x74>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e007      	b.n	8000b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e004      	b.n	8000b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	e001      	b.n	8000b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000010 	.word	0x20000010
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	2000000c 	.word	0x2000000c

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000a8 	.word	0x200000a8

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff3e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff31 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d005      	beq.n	8000dce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e029      	b.n	8000e22 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 020e 	bic.w	r2, r2, #14
 8000ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0201 	bic.w	r2, r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	f003 021c 	and.w	r2, r3, #28
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2201      	movs	r2, #1
 8000e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	4798      	blx	r3
    }
  }
  return status;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	e154      	b.n	80010e6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8146 	beq.w	80010e0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d00b      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d007      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e68:	2b11      	cmp	r3, #17
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d130      	bne.n	8000ed6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eaa:	2201      	movs	r2, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	091b      	lsrs	r3, r3, #4
 8000ec0:	f003 0201 	and.w	r2, r3, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0xea>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d123      	bne.n	8000f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	08da      	lsrs	r2, r3, #3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3208      	adds	r2, #8
 8000f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	691a      	ldr	r2, [r3, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	6939      	ldr	r1, [r7, #16]
 8000f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0203 	and.w	r2, r3, #3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80a0 	beq.w	80010e0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa0:	4b58      	ldr	r3, [pc, #352]	; (8001104 <HAL_GPIO_Init+0x2d8>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa4:	4a57      	ldr	r2, [pc, #348]	; (8001104 <HAL_GPIO_Init+0x2d8>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	6613      	str	r3, [r2, #96]	; 0x60
 8000fac:	4b55      	ldr	r3, [pc, #340]	; (8001104 <HAL_GPIO_Init+0x2d8>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fb8:	4a53      	ldr	r2, [pc, #332]	; (8001108 <HAL_GPIO_Init+0x2dc>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220f      	movs	r2, #15
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fe2:	d019      	beq.n	8001018 <HAL_GPIO_Init+0x1ec>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a49      	ldr	r2, [pc, #292]	; (800110c <HAL_GPIO_Init+0x2e0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1e8>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a48      	ldr	r2, [pc, #288]	; (8001110 <HAL_GPIO_Init+0x2e4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1e4>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a47      	ldr	r2, [pc, #284]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1e0>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a46      	ldr	r2, [pc, #280]	; (8001118 <HAL_GPIO_Init+0x2ec>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1dc>
 8001004:	2304      	movs	r3, #4
 8001006:	e008      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001008:	2307      	movs	r3, #7
 800100a:	e006      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 800100c:	2303      	movs	r3, #3
 800100e:	e004      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001010:	2302      	movs	r3, #2
 8001012:	e002      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001014:	2301      	movs	r3, #1
 8001016:	e000      	b.n	800101a <HAL_GPIO_Init+0x1ee>
 8001018:	2300      	movs	r3, #0
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	f002 0203 	and.w	r2, r2, #3
 8001020:	0092      	lsls	r2, r2, #2
 8001022:	4093      	lsls	r3, r2
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800102a:	4937      	ldr	r1, [pc, #220]	; (8001108 <HAL_GPIO_Init+0x2dc>)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	089b      	lsrs	r3, r3, #2
 8001030:	3302      	adds	r3, #2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001038:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_GPIO_Init+0x2f0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105c:	4a2f      	ldr	r2, [pc, #188]	; (800111c <HAL_GPIO_Init+0x2f0>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001062:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_GPIO_Init+0x2f0>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001086:	4a25      	ldr	r2, [pc, #148]	; (800111c <HAL_GPIO_Init+0x2f0>)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_GPIO_Init+0x2f0>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <HAL_GPIO_Init+0x2f0>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <HAL_GPIO_Init+0x2f0>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010da:	4a10      	ldr	r2, [pc, #64]	; (800111c <HAL_GPIO_Init+0x2f0>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa22 f303 	lsr.w	r3, r2, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f47f aea3 	bne.w	8000e3c <HAL_GPIO_Init+0x10>
  }
}
 80010f6:	bf00      	nop
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	40010000 	.word	0x40010000
 800110c:	48000400 	.word	0x48000400
 8001110:	48000800 	.word	0x48000800
 8001114:	48000c00 	.word	0x48000c00
 8001118:	48001000 	.word	0x48001000
 800111c:	40010400 	.word	0x40010400

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800113c:	e002      	b.n	8001144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113e:	887a      	ldrh	r2, [r7, #2]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <HAL_PWREx_GetVoltageRange+0x18>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40007000 	.word	0x40007000

0800116c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117a:	d130      	bne.n	80011de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001188:	d038      	beq.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001198:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800119a:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2232      	movs	r2, #50	; 0x32
 80011a0:	fb02 f303 	mul.w	r3, r2, r3
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011a6:	fba2 2303 	umull	r2, r3, r2, r3
 80011aa:	0c9b      	lsrs	r3, r3, #18
 80011ac:	3301      	adds	r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b0:	e002      	b.n	80011b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c4:	d102      	bne.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f2      	bne.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d8:	d110      	bne.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e00f      	b.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ea:	d007      	beq.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f4:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40007000 	.word	0x40007000
 8001210:	20000008 	.word	0x20000008
 8001214:	431bde83 	.word	0x431bde83

08001218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	f000 bc11 	b.w	8001a4e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800122c:	4ba0      	ldr	r3, [pc, #640]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001236:	4b9e      	ldr	r3, [pc, #632]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80e4 	beq.w	8001416 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d007      	beq.n	8001264 <HAL_RCC_OscConfig+0x4c>
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	f040 808b 	bne.w	8001372 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b01      	cmp	r3, #1
 8001260:	f040 8087 	bne.w	8001372 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001264:	4b92      	ldr	r3, [pc, #584]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_OscConfig+0x64>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e3e8      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1a      	ldr	r2, [r3, #32]
 8001280:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <HAL_RCC_OscConfig+0x7e>
 800128c:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001294:	e005      	b.n	80012a2 <HAL_RCC_OscConfig+0x8a>
 8001296:	4b86      	ldr	r3, [pc, #536]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d223      	bcs.n	80012ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fd40 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e3c9      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ba:	4b7d      	ldr	r3, [pc, #500]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7c      	ldr	r2, [pc, #496]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b7a      	ldr	r3, [pc, #488]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4977      	ldr	r1, [pc, #476]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d8:	4b75      	ldr	r3, [pc, #468]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	4972      	ldr	r1, [pc, #456]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
 80012ec:	e025      	b.n	800133a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a6f      	ldr	r2, [pc, #444]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	496a      	ldr	r1, [pc, #424]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130c:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	4965      	ldr	r1, [pc, #404]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fd00 	bl	8001d30 <RCC_SetFlashLatencyFromMSIRange>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e389      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800133a:	f000 fc6f 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 800133e:	4601      	mov	r1, r0
 8001340:	4b5b      	ldr	r3, [pc, #364]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a5a      	ldr	r2, [pc, #360]	; (80014b4 <HAL_RCC_OscConfig+0x29c>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	fa21 f303 	lsr.w	r3, r1, r3
 8001356:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <HAL_RCC_OscConfig+0x2a0>)
 8001358:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800135a:	4b58      	ldr	r3, [pc, #352]	; (80014bc <HAL_RCC_OscConfig+0x2a4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fbca 	bl	8000af8 <HAL_InitTick>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d052      	beq.n	8001414 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	e36d      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d032      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001386:	f7ff fbf3 	bl	8000b70 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800138e:	f7ff fbef 	bl	8000b70 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e356      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ac:	4b40      	ldr	r3, [pc, #256]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a3f      	ldr	r2, [pc, #252]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	493a      	ldr	r1, [pc, #232]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ca:	4b39      	ldr	r3, [pc, #228]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	4935      	ldr	r1, [pc, #212]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
 80013de:	e01a      	b.n	8001416 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fbc0 	bl	8000b70 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f4:	f7ff fbbc 	bl	8000b70 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e323      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1dc>
 8001412:	e000      	b.n	8001416 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001414:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d073      	beq.n	800150a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d005      	beq.n	8001434 <HAL_RCC_OscConfig+0x21c>
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b0c      	cmp	r3, #12
 800142c:	d10e      	bne.n	800144c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b03      	cmp	r3, #3
 8001432:	d10b      	bne.n	800144c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d063      	beq.n	8001508 <HAL_RCC_OscConfig+0x2f0>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d15f      	bne.n	8001508 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e300      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d106      	bne.n	8001464 <HAL_RCC_OscConfig+0x24c>
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e01d      	b.n	80014a0 <HAL_RCC_OscConfig+0x288>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x270>
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e00b      	b.n	80014a0 <HAL_RCC_OscConfig+0x288>
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800148e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001492:	6013      	str	r3, [r2, #0]
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_RCC_OscConfig+0x298>)
 800149a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb62 	bl	8000b70 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ae:	e010      	b.n	80014d2 <HAL_RCC_OscConfig+0x2ba>
 80014b0:	40021000 	.word	0x40021000
 80014b4:	080028c4 	.word	0x080028c4
 80014b8:	20000008 	.word	0x20000008
 80014bc:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fb56 	bl	8000b70 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e2bd      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	4baf      	ldr	r3, [pc, #700]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2a8>
 80014de:	e014      	b.n	800150a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb46 	bl	8000b70 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fb42 	bl	8000b70 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e2a9      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fa:	4ba5      	ldr	r3, [pc, #660]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x2d0>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d060      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	2b04      	cmp	r3, #4
 800151a:	d005      	beq.n	8001528 <HAL_RCC_OscConfig+0x310>
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	2b0c      	cmp	r3, #12
 8001520:	d119      	bne.n	8001556 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b02      	cmp	r3, #2
 8001526:	d116      	bne.n	8001556 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	4b99      	ldr	r3, [pc, #612]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_OscConfig+0x328>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e286      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b93      	ldr	r3, [pc, #588]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	4990      	ldr	r1, [pc, #576]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001554:	e040      	b.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d023      	beq.n	80015a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155e:	4b8c      	ldr	r3, [pc, #560]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a8b      	ldr	r2, [pc, #556]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fb01 	bl	8000b70 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fafd 	bl	8000b70 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e264      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001584:	4b82      	ldr	r3, [pc, #520]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b7f      	ldr	r3, [pc, #508]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	497c      	ldr	r1, [pc, #496]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	604b      	str	r3, [r1, #4]
 80015a4:	e018      	b.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a6:	4b7a      	ldr	r3, [pc, #488]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a79      	ldr	r2, [pc, #484]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80015ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fadd 	bl	8000b70 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff fad9 	bl	8000b70 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e240      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015cc:	4b70      	ldr	r3, [pc, #448]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d03c      	beq.n	800165e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	695b      	ldr	r3, [r3, #20]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d01c      	beq.n	8001626 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ec:	4b68      	ldr	r3, [pc, #416]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	4a67      	ldr	r2, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fab8 	bl	8000b70 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fab4 	bl	8000b70 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e21b      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001616:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0ef      	beq.n	8001604 <HAL_RCC_OscConfig+0x3ec>
 8001624:	e01b      	b.n	800165e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001626:	4b5a      	ldr	r3, [pc, #360]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 800162e:	f023 0301 	bic.w	r3, r3, #1
 8001632:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001636:	f7ff fa9b 	bl	8000b70 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163e:	f7ff fa97 	bl	8000b70 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1fe      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001650:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1ef      	bne.n	800163e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80a6 	beq.w	80017b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800166c:	2300      	movs	r3, #0
 800166e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001670:	4b47      	ldr	r3, [pc, #284]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d10d      	bne.n	8001698 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167c:	4b44      	ldr	r3, [pc, #272]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	4a43      	ldr	r2, [pc, #268]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001686:	6593      	str	r3, [r2, #88]	; 0x58
 8001688:	4b41      	ldr	r3, [pc, #260]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001694:	2301      	movs	r3, #1
 8001696:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001698:	4b3e      	ldr	r3, [pc, #248]	; (8001794 <HAL_RCC_OscConfig+0x57c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d118      	bne.n	80016d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016a4:	4b3b      	ldr	r3, [pc, #236]	; (8001794 <HAL_RCC_OscConfig+0x57c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a3a      	ldr	r2, [pc, #232]	; (8001794 <HAL_RCC_OscConfig+0x57c>)
 80016aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa5e 	bl	8000b70 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b8:	f7ff fa5a 	bl	8000b70 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e1c1      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ca:	4b32      	ldr	r3, [pc, #200]	; (8001794 <HAL_RCC_OscConfig+0x57c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d108      	bne.n	80016f0 <HAL_RCC_OscConfig+0x4d8>
 80016de:	4b2c      	ldr	r3, [pc, #176]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e4:	4a2a      	ldr	r2, [pc, #168]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ee:	e024      	b.n	800173a <HAL_RCC_OscConfig+0x522>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b05      	cmp	r3, #5
 80016f6:	d110      	bne.n	800171a <HAL_RCC_OscConfig+0x502>
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	4a24      	ldr	r2, [pc, #144]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001708:	4b21      	ldr	r3, [pc, #132]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170e:	4a20      	ldr	r2, [pc, #128]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001718:	e00f      	b.n	800173a <HAL_RCC_OscConfig+0x522>
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 800171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 800172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001730:	4a17      	ldr	r2, [pc, #92]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d016      	beq.n	8001770 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fa15 	bl	8000b70 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001748:	e00a      	b.n	8001760 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff fa11 	bl	8000b70 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e176      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_OscConfig+0x578>)
 8001762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0ed      	beq.n	800174a <HAL_RCC_OscConfig+0x532>
 800176e:	e01a      	b.n	80017a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001770:	f7ff f9fe 	bl	8000b70 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001776:	e00f      	b.n	8001798 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001778:	f7ff f9fa 	bl	8000b70 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f241 3288 	movw	r2, #5000	; 0x1388
 8001786:	4293      	cmp	r3, r2
 8001788:	d906      	bls.n	8001798 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e15f      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001798:	4baa      	ldr	r3, [pc, #680]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1e8      	bne.n	8001778 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4ba5      	ldr	r3, [pc, #660]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	4aa4      	ldr	r2, [pc, #656]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80017b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0320 	and.w	r3, r3, #32
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d03c      	beq.n	800183e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d01c      	beq.n	8001806 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017cc:	4b9d      	ldr	r3, [pc, #628]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80017ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d2:	4a9c      	ldr	r2, [pc, #624]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff f9c8 	bl	8000b70 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017e4:	f7ff f9c4 	bl	8000b70 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e12b      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017f6:	4b93      	ldr	r3, [pc, #588]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80017f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ef      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5cc>
 8001804:	e01b      	b.n	800183e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001806:	4b8f      	ldr	r3, [pc, #572]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800180c:	4a8d      	ldr	r2, [pc, #564]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001816:	f7ff f9ab 	bl	8000b70 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800181e:	f7ff f9a7 	bl	8000b70 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e10e      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001830:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001832:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1ef      	bne.n	800181e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8102 	beq.w	8001a4c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	2b02      	cmp	r3, #2
 800184e:	f040 80c5 	bne.w	80019dc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0203 	and.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	429a      	cmp	r2, r3
 8001864:	d12c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	3b01      	subs	r3, #1
 8001872:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d123      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d11b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001892:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d113      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a2:	085b      	lsrs	r3, r3, #1
 80018a4:	3b01      	subs	r3, #1
 80018a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d109      	bne.n	80018c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	3b01      	subs	r3, #1
 80018ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d067      	beq.n	8001990 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d062      	beq.n	800198c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018c6:	4b5f      	ldr	r3, [pc, #380]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0bb      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018d6:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a5a      	ldr	r2, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80018dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e2:	f7ff f945 	bl	8000b70 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff f941 	bl	8000b70 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e0a8      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fc:	4b51      	ldr	r3, [pc, #324]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001908:	4b4e      	ldr	r3, [pc, #312]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b4e      	ldr	r3, [pc, #312]	; (8001a48 <HAL_RCC_OscConfig+0x830>)
 800190e:	4013      	ands	r3, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001918:	3a01      	subs	r2, #1
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	4311      	orrs	r1, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001922:	0212      	lsls	r2, r2, #8
 8001924:	4311      	orrs	r1, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800192a:	0852      	lsrs	r2, r2, #1
 800192c:	3a01      	subs	r2, #1
 800192e:	0552      	lsls	r2, r2, #21
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001936:	0852      	lsrs	r2, r2, #1
 8001938:	3a01      	subs	r2, #1
 800193a:	0652      	lsls	r2, r2, #25
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001942:	06d2      	lsls	r2, r2, #27
 8001944:	430a      	orrs	r2, r1
 8001946:	493f      	ldr	r1, [pc, #252]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001948:	4313      	orrs	r3, r2
 800194a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a39      	ldr	r2, [pc, #228]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001964:	f7ff f904 	bl	8000b70 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f900 	bl	8000b70 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e067      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198a:	e05f      	b.n	8001a4c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e05e      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d157      	bne.n	8001a4c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b4:	f7ff f8dc 	bl	8000b70 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f8d8 	bl	8000b70 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e03f      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x7a4>
 80019da:	e037      	b.n	8001a4c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d02d      	beq.n	8001a3e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80019e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ec:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d105      	bne.n	8001a06 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001a00:	f023 0303 	bic.w	r3, r3, #3
 8001a04:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001a0c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a14:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a16:	f7ff f8ab 	bl	8000b70 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7ff f8a7 	bl	8000b70 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e00e      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_RCC_OscConfig+0x82c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x806>
 8001a3c:	e006      	b.n	8001a4c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e005      	b.n	8001a4e <HAL_RCC_OscConfig+0x836>
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop

08001a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0c8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d910      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 0207 	bic.w	r2, r3, #7
 8001a82:	4961      	ldr	r1, [pc, #388]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b0      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d04c      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d107      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab0:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d121      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e09e      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac8:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d115      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e092      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ae0:	4b4a      	ldr	r3, [pc, #296]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e086      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e07e      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b00:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f023 0203 	bic.w	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	493f      	ldr	r1, [pc, #252]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b12:	f7ff f82d 	bl	8000b70 <HAL_GetTick>
 8001b16:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7ff f829 	bl	8000b70 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e066      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 020c 	and.w	r2, r3, #12
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d1eb      	bne.n	8001b1a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	492c      	ldr	r1, [pc, #176]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4924      	ldr	r1, [pc, #144]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <HAL_RCC_ClockConfig+0x1b0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e036      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4918      	ldr	r1, [pc, #96]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bba:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4910      	ldr	r1, [pc, #64]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bce:	f000 f825 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_RCC_ClockConfig+0x1b4>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	fa21 f303 	lsr.w	r3, r1, r3
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe ff80 	bl	8000af8 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	080028c4 	.word	0x080028c4
 8001c14:	20000008 	.word	0x20000008
 8001c18:	2000000c 	.word	0x2000000c

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c34:	4b3a      	ldr	r3, [pc, #232]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x34>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d121      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d11e      	bne.n	8001c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e005      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c78:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d102      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c94:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	e004      	b.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d133      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d002      	beq.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xa4>
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d003      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xaa>
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cc2:	617b      	str	r3, [r7, #20]
      break;
 8001cc4:	e005      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc8:	617b      	str	r3, [r7, #20]
      break;
 8001cca:	e002      	b.n	8001cd2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	617b      	str	r3, [r7, #20]
      break;
 8001cd0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	3301      	adds	r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	fb02 f203 	mul.w	r2, r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0e5b      	lsrs	r3, r3, #25
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	3301      	adds	r3, #1
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d12:	69bb      	ldr	r3, [r7, #24]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3724      	adds	r7, #36	; 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40021000 	.word	0x40021000
 8001d24:	080028d4 	.word	0x080028d4
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d3c:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d48:	f7ff fa02 	bl	8001150 <HAL_PWREx_GetVoltageRange>
 8001d4c:	6178      	str	r0, [r7, #20]
 8001d4e:	e014      	b.n	8001d7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d68:	f7ff f9f2 	bl	8001150 <HAL_PWREx_GetVoltageRange>
 8001d6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d10b      	bne.n	8001d9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b80      	cmp	r3, #128	; 0x80
 8001d86:	d919      	bls.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d8c:	d902      	bls.n	8001d94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8e:	2302      	movs	r3, #2
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	e013      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d94:	2301      	movs	r3, #1
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	e010      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b80      	cmp	r3, #128	; 0x80
 8001d9e:	d902      	bls.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001da0:	2303      	movs	r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	e00a      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d102      	bne.n	8001db2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dac:	2302      	movs	r3, #2
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	e004      	b.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b70      	cmp	r3, #112	; 0x70
 8001db6:	d101      	bne.n	8001dbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db8:	2301      	movs	r3, #1
 8001dba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 0207 	bic.w	r2, r3, #7
 8001dc4:	4909      	ldr	r1, [pc, #36]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40022000 	.word	0x40022000

08001df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e095      	b.n	8001f2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d108      	bne.n	8001e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e12:	d009      	beq.n	8001e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
 8001e1a:	e005      	b.n	8001e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7fe fb66 	bl	8000514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e68:	d902      	bls.n	8001e70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e002      	b.n	8001e76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001e7e:	d007      	beq.n	8001e90 <HAL_SPI_Init+0xa0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e88:	d002      	beq.n	8001e90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	ea42 0103 	orr.w	r1, r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	f003 0204 	and.w	r2, r3, #4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f0c:	ea42 0103 	orr.w	r1, r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b08a      	sub	sp, #40	; 0x28
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f44:	2301      	movs	r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_SPI_TransmitReceive+0x26>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e1fb      	b.n	8002354 <HAL_SPI_TransmitReceive+0x41e>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f64:	f7fe fe04 	bl	8000b70 <HAL_GetTick>
 8001f68:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f70:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001f7c:	887b      	ldrh	r3, [r7, #2]
 8001f7e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f80:	7efb      	ldrb	r3, [r7, #27]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d00e      	beq.n	8001fa4 <HAL_SPI_TransmitReceive+0x6e>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f8c:	d106      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d102      	bne.n	8001f9c <HAL_SPI_TransmitReceive+0x66>
 8001f96:	7efb      	ldrb	r3, [r7, #27]
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d003      	beq.n	8001fa4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001fa2:	e1cd      	b.n	8002340 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x80>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x80>
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001fbc:	e1c0      	b.n	8002340 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d003      	beq.n	8001fd2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2205      	movs	r2, #5
 8001fce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	887a      	ldrh	r2, [r7, #2]
 8001fe2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	887a      	ldrh	r2, [r7, #2]
 8001fea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	68ba      	ldr	r2, [r7, #8]
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	887a      	ldrh	r2, [r7, #2]
 8001ffe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002014:	d802      	bhi.n	800201c <HAL_SPI_TransmitReceive+0xe6>
 8002016:	8a3b      	ldrh	r3, [r7, #16]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d908      	bls.n	800202e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	e007      	b.n	800203e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800203c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d007      	beq.n	800205c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800205a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002064:	d97c      	bls.n	8002160 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_SPI_TransmitReceive+0x13e>
 800206e:	8a7b      	ldrh	r3, [r7, #18]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d169      	bne.n	8002148 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002098:	e056      	b.n	8002148 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d11b      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x1aa>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d016      	beq.n	80020e0 <HAL_SPI_TransmitReceive+0x1aa>
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d113      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	881a      	ldrh	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	1c9a      	adds	r2, r3, #2
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d11c      	bne.n	8002128 <HAL_SPI_TransmitReceive+0x1f2>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	b292      	uxth	r2, r2
 8002106:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	1c9a      	adds	r2, r3, #2
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002124:	2301      	movs	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002128:	f7fe fd22 	bl	8000b70 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002134:	429a      	cmp	r2, r3
 8002136:	d807      	bhi.n	8002148 <HAL_SPI_TransmitReceive+0x212>
 8002138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213e:	d003      	beq.n	8002148 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002146:	e0fb      	b.n	8002340 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1a3      	bne.n	800209a <HAL_SPI_TransmitReceive+0x164>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d19d      	bne.n	800209a <HAL_SPI_TransmitReceive+0x164>
 800215e:	e0df      	b.n	8002320 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_SPI_TransmitReceive+0x23a>
 8002168:	8a7b      	ldrh	r3, [r7, #18]
 800216a:	2b01      	cmp	r3, #1
 800216c:	f040 80cb 	bne.w	8002306 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d912      	bls.n	80021a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217e:	881a      	ldrh	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	1c9a      	adds	r2, r3, #2
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b02      	subs	r3, #2
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800219e:	e0b2      	b.n	8002306 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	330c      	adds	r3, #12
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021bc:	b29b      	uxth	r3, r3
 80021be:	3b01      	subs	r3, #1
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021c6:	e09e      	b.n	8002306 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d134      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x30a>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02f      	beq.n	8002240 <HAL_SPI_TransmitReceive+0x30a>
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d12c      	bne.n	8002240 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d912      	bls.n	8002216 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	1c9a      	adds	r2, r3, #2
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b02      	subs	r3, #2
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002214:	e012      	b.n	800223c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	330c      	adds	r3, #12
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b01      	subs	r3, #1
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b01      	cmp	r3, #1
 800224c:	d148      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x3aa>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d042      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b01      	cmp	r3, #1
 8002264:	d923      	bls.n	80022ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	b292      	uxth	r2, r2
 8002272:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	1c9a      	adds	r2, r3, #2
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002284:	b29b      	uxth	r3, r3
 8002286:	3b02      	subs	r3, #2
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d81f      	bhi.n	80022dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	e016      	b.n	80022dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f103 020c 	add.w	r2, r3, #12
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	3b01      	subs	r3, #1
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022dc:	2301      	movs	r3, #1
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022e0:	f7fe fc46 	bl	8000b70 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d803      	bhi.n	80022f8 <HAL_SPI_TransmitReceive+0x3c2>
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f6:	d102      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x3c8>
 80022f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002304:	e01c      	b.n	8002340 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	f47f af5b 	bne.w	80021c8 <HAL_SPI_TransmitReceive+0x292>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002318:	b29b      	uxth	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	f47f af54 	bne.w	80021c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002320:	69fa      	ldr	r2, [r7, #28]
 8002322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 fa4f 	bl	80027c8 <SPI_EndRxTxTransaction>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2220      	movs	r2, #32
 800233a:	661a      	str	r2, [r3, #96]	; 0x60
 800233c:	e000      	b.n	8002340 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800233e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002354:	4618      	mov	r0, r3
 8002356:	3728      	adds	r7, #40	; 0x28
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	099b      	lsrs	r3, r3, #6
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d004      	beq.n	80023a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
    return;
 800239e:	e0d8      	b.n	8002552 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	085b      	lsrs	r3, r3, #1
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_SPI_IRQHandler+0x66>
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	09db      	lsrs	r3, r3, #7
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	4798      	blx	r3
    return;
 80023c0:	e0c7      	b.n	8002552 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	095b      	lsrs	r3, r3, #5
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_SPI_IRQHandler+0x8c>
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 80b5 	beq.w	8002552 <HAL_SPI_IRQHandler+0x1f6>
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80ae 	beq.w	8002552 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	099b      	lsrs	r3, r3, #6
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d023      	beq.n	800244a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b03      	cmp	r3, #3
 800240c:	d011      	beq.n	8002432 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002412:	f043 0204 	orr.w	r2, r3, #4
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	e00b      	b.n	800244a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002432:	2300      	movs	r3, #0
 8002434:	613b      	str	r3, [r7, #16]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
        return;
 8002448:	e083      	b.n	8002552 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	095b      	lsrs	r3, r3, #5
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d014      	beq.n	8002480 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00c      	beq.n	80024a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002490:	f043 0208 	orr.w	r2, r3, #8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d050      	beq.n	8002550 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d104      	bne.n	80024da <HAL_SPI_IRQHandler+0x17e>
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d034      	beq.n	8002544 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0203 	bic.w	r2, r2, #3
 80024e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d011      	beq.n	8002516 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_SPI_IRQHandler+0x1fc>)
 80024f8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fc53 	bl	8000daa <HAL_DMA_Abort_IT>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_SPI_IRQHandler+0x1fc>)
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe fc3d 	bl	8000daa <HAL_DMA_Abort_IT>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002542:	e003      	b.n	800254c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f809 	bl	800255c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800254a:	e000      	b.n	800254e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800254c:	bf00      	nop
    return;
 800254e:	bf00      	nop
 8002550:	bf00      	nop
  }
}
 8002552:	3720      	adds	r7, #32
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	08002571 	.word	0x08002571

0800255c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff ffe5 	bl	800255c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	4613      	mov	r3, r2
 80025aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025ac:	f7fe fae0 	bl	8000b70 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	4413      	add	r3, r2
 80025ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025bc:	f7fe fad8 	bl	8000b70 <HAL_GetTick>
 80025c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025c2:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	015b      	lsls	r3, r3, #5
 80025c8:	0d1b      	lsrs	r3, r3, #20
 80025ca:	69fa      	ldr	r2, [r7, #28]
 80025cc:	fb02 f303 	mul.w	r3, r2, r3
 80025d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025d2:	e054      	b.n	800267e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025da:	d050      	beq.n	800267e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025dc:	f7fe fac8 	bl	8000b70 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d902      	bls.n	80025f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d13d      	bne.n	800266e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002600:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800260a:	d111      	bne.n	8002630 <SPI_WaitFlagStateUntilTimeout+0x94>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002614:	d004      	beq.n	8002620 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261e:	d107      	bne.n	8002630 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002638:	d10f      	bne.n	800265a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002658:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e017      	b.n	800269e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3b01      	subs	r3, #1
 800267c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4013      	ands	r3, r2
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	429a      	cmp	r2, r3
 800268c:	bf0c      	ite	eq
 800268e:	2301      	moveq	r3, #1
 8002690:	2300      	movne	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	429a      	cmp	r2, r3
 800269a:	d19b      	bne.n	80025d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000008 	.word	0x20000008

080026ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80026ba:	f7fe fa59 	bl	8000b70 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026ca:	f7fe fa51 	bl	8000b70 <HAL_GetTick>
 80026ce:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80026d0:	4b3c      	ldr	r3, [pc, #240]	; (80027c4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00da      	lsls	r2, r3, #3
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	0d1b      	lsrs	r3, r3, #20
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	fb02 f303 	mul.w	r3, r2, r3
 80026e6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80026e8:	e05f      	b.n	80027aa <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80026f0:	d106      	bne.n	8002700 <SPI_WaitFifoStateUntilTimeout+0x54>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002706:	d050      	beq.n	80027aa <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002708:	f7fe fa32 	bl	8000b70 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	429a      	cmp	r2, r3
 8002716:	d902      	bls.n	800271e <SPI_WaitFifoStateUntilTimeout+0x72>
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d13d      	bne.n	800279a <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800272c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002736:	d111      	bne.n	800275c <SPI_WaitFifoStateUntilTimeout+0xb0>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002740:	d004      	beq.n	800274c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274a:	d107      	bne.n	800275c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800275a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002764:	d10f      	bne.n	8002786 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e010      	b.n	80027bc <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d197      	bne.n	80026ea <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000008 	.word	0x20000008

080027c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2200      	movs	r2, #0
 80027dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f7ff ff63 	bl	80026ac <SPI_WaitFifoStateUntilTimeout>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	f043 0220 	orr.w	r2, r3, #32
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e027      	b.n	800284c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff fec8 	bl	800259c <SPI_WaitFlagStateUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e014      	b.n	800284c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2200      	movs	r2, #0
 800282a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff ff3c 	bl	80026ac <SPI_WaitFifoStateUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e000      	b.n	800284c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <__libc_init_array>:
 8002854:	b570      	push	{r4, r5, r6, lr}
 8002856:	4e0d      	ldr	r6, [pc, #52]	; (800288c <__libc_init_array+0x38>)
 8002858:	4c0d      	ldr	r4, [pc, #52]	; (8002890 <__libc_init_array+0x3c>)
 800285a:	1ba4      	subs	r4, r4, r6
 800285c:	10a4      	asrs	r4, r4, #2
 800285e:	2500      	movs	r5, #0
 8002860:	42a5      	cmp	r5, r4
 8002862:	d109      	bne.n	8002878 <__libc_init_array+0x24>
 8002864:	4e0b      	ldr	r6, [pc, #44]	; (8002894 <__libc_init_array+0x40>)
 8002866:	4c0c      	ldr	r4, [pc, #48]	; (8002898 <__libc_init_array+0x44>)
 8002868:	f000 f820 	bl	80028ac <_init>
 800286c:	1ba4      	subs	r4, r4, r6
 800286e:	10a4      	asrs	r4, r4, #2
 8002870:	2500      	movs	r5, #0
 8002872:	42a5      	cmp	r5, r4
 8002874:	d105      	bne.n	8002882 <__libc_init_array+0x2e>
 8002876:	bd70      	pop	{r4, r5, r6, pc}
 8002878:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800287c:	4798      	blx	r3
 800287e:	3501      	adds	r5, #1
 8002880:	e7ee      	b.n	8002860 <__libc_init_array+0xc>
 8002882:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002886:	4798      	blx	r3
 8002888:	3501      	adds	r5, #1
 800288a:	e7f2      	b.n	8002872 <__libc_init_array+0x1e>
 800288c:	08002904 	.word	0x08002904
 8002890:	08002904 	.word	0x08002904
 8002894:	08002904 	.word	0x08002904
 8002898:	08002908 	.word	0x08002908

0800289c <memset>:
 800289c:	4402      	add	r2, r0
 800289e:	4603      	mov	r3, r0
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d100      	bne.n	80028a6 <memset+0xa>
 80028a4:	4770      	bx	lr
 80028a6:	f803 1b01 	strb.w	r1, [r3], #1
 80028aa:	e7f9      	b.n	80028a0 <memset+0x4>

080028ac <_init>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	bf00      	nop
 80028b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b2:	bc08      	pop	{r3}
 80028b4:	469e      	mov	lr, r3
 80028b6:	4770      	bx	lr

080028b8 <_fini>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	bf00      	nop
 80028bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028be:	bc08      	pop	{r3}
 80028c0:	469e      	mov	lr, r3
 80028c2:	4770      	bx	lr
